{
    "job_1": {
        "vectorFileSpecifications": [
            {
                "filename": "./data/file1.csv",
                "propsToTake": [
                    "Field1",
                    "Field2",
                    "Field3",
                    "Field4"
                ],
                "inMemory": false
            },
            {
                "filename": "./data/file2.csv",
                "propsToTake": [
                    "Field_x1",
                    "Field_x2",
                    "Field_x3",
                    "Field_x4",
                    "Field_x5",
                    "Field_x6",
                    "Field_x7"
                ],
                "inMemory": true
            }
        ],
        "outputDirectory": "./data/",
        "operationConfiguration": {
            "calculationMap": "var Lon1 = object.Lon1; var Lat1 = object.Lat1; var Latitude = object.Latitude; var Longitude = object.Latitude; var R = 3959; var toRad = function(number) { return number * Math.PI / 180; }; var lat1 = parseFloat(Lat1); var lon1 = parseFloat(Lon1); var lat2 = parseFloat(Latitude); var lon2 = parseFloat(Longitude); var phiLat1 = toRad(lat1); var phiLat2 = toRad(lat2); var phiLon1 = toRad(lon1); var phiLon2 = toRad(lon2); var deltaLat = Math.abs(phiLat1 - phiLat2); var deltaLon = Math.abs(phiLon1 - phiLon2); var A = Math.sin(deltaLat/2) * Math.sin(deltaLat/2) + (Math.cos(phiLat1) * Math.cos(phiLat2) * Math.sin(deltaLon/2) * Math.sin(deltaLon/2)); var c = 2 * Math.atan2(Math.sqrt(A), Math.sqrt(1 - A)); var distance = R * c; let zone = 0; if (distance < 3) { zone = 1; } else if (distance >= 3 && distance <= 6){ zone = 2; } callback({distance:distance, zone:zone});",
            "filter": "return !!data.zone;",
            "outputMap": "return [{key: 'Distance (Miles)', value: data.operationOutput.distance},{key: 'Zone',value: data.operationOutput.zone}];"
        }
    }
}